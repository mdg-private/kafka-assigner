#!/usr/bin/env bash
set -eu

## Executes reassignment plans generated by kafka-plan-reassignments.sh
## Plans are run one-by-one and wait for completion before starting the next one
## As work progresses, plans are moved to *.completed in case you need to rollback
## Examples:

## > kafka-execute-reassignments.sh -s staging -b 4
## Executes any partition movement plans found in the kafka-move-4-staging directory


usage() { echo "Usage: $0 [-s <dev|staging|prod>] [-b <broker id to remove (optional)>]" 1>&2; exit 1; }

while getopts ":s:b:" o; do
    case "${o}" in
        b)
            BROKER_ID=${OPTARG}
            ;;
        s)
            STACK=${OPTARG}
            ;;
        *)
            usage
            ;;
    esac
done

BOOTSTRAP="bootstrap.kafka-default.svc.$STACK.apollo-internal:9092"

function execute_reassignment() {
  # Not implemented: --throttle $THROTTLE_BYTES
  # Throttling can affect replication between ISR's so it can affect the performance of the cluster
  # This can be added later if moving one partition at a time is still too resource intensive
  kafka-reassign-partitions --bootstrap-server "$BOOTSTRAP" --reassignment-json-file $1 --execute
}

function wait_until_complete() {
    while true; do
      kafka-reassign-partitions --bootstrap-server "$BOOTSTRAP" --reassignment-json-file $1 --verify | grep progress || break
      echo "Still running"
      sleep 5
    done
    kafka-reassign-partitions --bootstrap-server "$BOOTSTRAP" --reassignment-json-file $1 --verify
}

function cancel() {
  kafka-reassign-partitions --bootstrap-server "$BOOTSTRAP" --reassignment-json-file $1 --cancel
}

WORKDIR=kafka-move-${BROKER_ID:-}-$STACK

# TODO: Consider moving the prompt to top-level and auto-run.
# We could capture SIGINT and prompt to trigger a cancellation instead
# But running yes | <script> is working ok for now
for f in $WORKDIR/reassign*.json; do
   read -p "Run $f (y/n/cancel)?" RESPONSE
   if [ "$RESPONSE" == "y" ]; then
     execute_reassignment $f
     wait_until_complete $f
     mv $f $f.completed
   elif [ "$RESPONSE" == "cancel" ]; then
     echo "Canceling"
     cancel $f
   else
     echo "Skipping"
   fi
done
